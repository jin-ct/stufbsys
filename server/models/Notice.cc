/**
 *
 *  Notice.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Notice.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string Notice::Cols::_notice_id = "\"notice_id\"";
const std::string Notice::Cols::_show_text = "\"show_text\"";
const std::string Notice::Cols::_detail = "\"detail\"";
const std::string Notice::Cols::_publisher = "\"publisher\"";
const std::string Notice::Cols::_is_show = "\"is_show\"";
const std::string Notice::Cols::_date = "\"date\"";
const std::string Notice::primaryKeyName = "notice_id";
const bool Notice::hasPrimaryKey = true;
const std::string Notice::tableName = "\"notice\"";

const std::vector<typename Notice::MetaData> Notice::metaData_={
{"notice_id","int64_t","bigint",8,1,1,1},
{"show_text","std::string","character varying",255,0,0,1},
{"detail","std::string","text",0,0,0,0},
{"publisher","std::string","character varying",20,0,0,0},
{"is_show","bool","boolean",1,0,0,1},
{"date","::trantor::Date","date",0,0,0,1}
};
const std::string &Notice::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Notice::Notice(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["notice_id"].isNull())
        {
            noticeId_=std::make_shared<int64_t>(r["notice_id"].as<int64_t>());
        }
        if(!r["show_text"].isNull())
        {
            showText_=std::make_shared<std::string>(r["show_text"].as<std::string>());
        }
        if(!r["detail"].isNull())
        {
            detail_=std::make_shared<std::string>(r["detail"].as<std::string>());
        }
        if(!r["publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(r["publisher"].as<std::string>());
        }
        if(!r["is_show"].isNull())
        {
            isShow_=std::make_shared<bool>(r["is_show"].as<bool>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            noticeId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            showText_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            detail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            publisher_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isShow_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Notice::Notice(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            noticeId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            showText_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            detail_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isShow_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Notice::Notice(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("notice_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["notice_id"].isNull())
        {
            noticeId_=std::make_shared<int64_t>((int64_t)pJson["notice_id"].asInt64());
        }
    }
    if(pJson.isMember("show_text"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["show_text"].isNull())
        {
            showText_=std::make_shared<std::string>(pJson["show_text"].asString());
        }
    }
    if(pJson.isMember("detail"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["detail"].isNull())
        {
            detail_=std::make_shared<std::string>(pJson["detail"].asString());
        }
    }
    if(pJson.isMember("publisher"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson["publisher"].asString());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<bool>(pJson["is_show"].asBool());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Notice::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            noticeId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            showText_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            detail_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isShow_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Notice::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("notice_id"))
    {
        if(!pJson["notice_id"].isNull())
        {
            noticeId_=std::make_shared<int64_t>((int64_t)pJson["notice_id"].asInt64());
        }
    }
    if(pJson.isMember("show_text"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["show_text"].isNull())
        {
            showText_=std::make_shared<std::string>(pJson["show_text"].asString());
        }
    }
    if(pJson.isMember("detail"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["detail"].isNull())
        {
            detail_=std::make_shared<std::string>(pJson["detail"].asString());
        }
    }
    if(pJson.isMember("publisher"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["publisher"].isNull())
        {
            publisher_=std::make_shared<std::string>(pJson["publisher"].asString());
        }
    }
    if(pJson.isMember("is_show"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_show"].isNull())
        {
            isShow_=std::make_shared<bool>(pJson["is_show"].asBool());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int64_t &Notice::getValueOfNoticeId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(noticeId_)
        return *noticeId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Notice::getNoticeId() const noexcept
{
    return noticeId_;
}
void Notice::setNoticeId(const int64_t &pNoticeId) noexcept
{
    noticeId_ = std::make_shared<int64_t>(pNoticeId);
    dirtyFlag_[0] = true;
}
const typename Notice::PrimaryKeyType & Notice::getPrimaryKey() const
{
    assert(noticeId_);
    return *noticeId_;
}

const std::string &Notice::getValueOfShowText() const noexcept
{
    static const std::string defaultValue = std::string();
    if(showText_)
        return *showText_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Notice::getShowText() const noexcept
{
    return showText_;
}
void Notice::setShowText(const std::string &pShowText) noexcept
{
    showText_ = std::make_shared<std::string>(pShowText);
    dirtyFlag_[1] = true;
}
void Notice::setShowText(std::string &&pShowText) noexcept
{
    showText_ = std::make_shared<std::string>(std::move(pShowText));
    dirtyFlag_[1] = true;
}

const std::string &Notice::getValueOfDetail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(detail_)
        return *detail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Notice::getDetail() const noexcept
{
    return detail_;
}
void Notice::setDetail(const std::string &pDetail) noexcept
{
    detail_ = std::make_shared<std::string>(pDetail);
    dirtyFlag_[2] = true;
}
void Notice::setDetail(std::string &&pDetail) noexcept
{
    detail_ = std::make_shared<std::string>(std::move(pDetail));
    dirtyFlag_[2] = true;
}
void Notice::setDetailToNull() noexcept
{
    detail_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Notice::getValueOfPublisher() const noexcept
{
    static const std::string defaultValue = std::string();
    if(publisher_)
        return *publisher_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Notice::getPublisher() const noexcept
{
    return publisher_;
}
void Notice::setPublisher(const std::string &pPublisher) noexcept
{
    publisher_ = std::make_shared<std::string>(pPublisher);
    dirtyFlag_[3] = true;
}
void Notice::setPublisher(std::string &&pPublisher) noexcept
{
    publisher_ = std::make_shared<std::string>(std::move(pPublisher));
    dirtyFlag_[3] = true;
}
void Notice::setPublisherToNull() noexcept
{
    publisher_.reset();
    dirtyFlag_[3] = true;
}

const bool &Notice::getValueOfIsShow() const noexcept
{
    static const bool defaultValue = bool();
    if(isShow_)
        return *isShow_;
    return defaultValue;
}
const std::shared_ptr<bool> &Notice::getIsShow() const noexcept
{
    return isShow_;
}
void Notice::setIsShow(const bool &pIsShow) noexcept
{
    isShow_ = std::make_shared<bool>(pIsShow);
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Notice::getValueOfDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Notice::getDate() const noexcept
{
    return date_;
}
void Notice::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[5] = true;
}

void Notice::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Notice::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "show_text",
        "detail",
        "publisher",
        "is_show",
        "date"
    };
    return inCols;
}

void Notice::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShowText())
        {
            binder << getValueOfShowText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDetail())
        {
            binder << getValueOfDetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPublisher())
        {
            binder << getValueOfPublisher();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Notice::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Notice::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getShowText())
        {
            binder << getValueOfShowText();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDetail())
        {
            binder << getValueOfDetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPublisher())
        {
            binder << getValueOfPublisher();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsShow())
        {
            binder << getValueOfIsShow();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Notice::toJson() const
{
    Json::Value ret;
    if(getNoticeId())
    {
        ret["notice_id"]=(Json::Int64)getValueOfNoticeId();
    }
    else
    {
        ret["notice_id"]=Json::Value();
    }
    if(getShowText())
    {
        ret["show_text"]=getValueOfShowText();
    }
    else
    {
        ret["show_text"]=Json::Value();
    }
    if(getDetail())
    {
        ret["detail"]=getValueOfDetail();
    }
    else
    {
        ret["detail"]=Json::Value();
    }
    if(getPublisher())
    {
        ret["publisher"]=getValueOfPublisher();
    }
    else
    {
        ret["publisher"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

Json::Value Notice::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getNoticeId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfNoticeId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getShowText())
            {
                ret[pMasqueradingVector[1]]=getValueOfShowText();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDetail())
            {
                ret[pMasqueradingVector[2]]=getValueOfDetail();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPublisher())
            {
                ret[pMasqueradingVector[3]]=getValueOfPublisher();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsShow())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsShow();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[5]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getNoticeId())
    {
        ret["notice_id"]=(Json::Int64)getValueOfNoticeId();
    }
    else
    {
        ret["notice_id"]=Json::Value();
    }
    if(getShowText())
    {
        ret["show_text"]=getValueOfShowText();
    }
    else
    {
        ret["show_text"]=Json::Value();
    }
    if(getDetail())
    {
        ret["detail"]=getValueOfDetail();
    }
    else
    {
        ret["detail"]=Json::Value();
    }
    if(getPublisher())
    {
        ret["publisher"]=getValueOfPublisher();
    }
    else
    {
        ret["publisher"]=Json::Value();
    }
    if(getIsShow())
    {
        ret["is_show"]=getValueOfIsShow();
    }
    else
    {
        ret["is_show"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

bool Notice::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("notice_id"))
    {
        if(!validJsonOfField(0, "notice_id", pJson["notice_id"], err, true))
            return false;
    }
    if(pJson.isMember("show_text"))
    {
        if(!validJsonOfField(1, "show_text", pJson["show_text"], err, true))
            return false;
    }
    else
    {
        err="The show_text column cannot be null";
        return false;
    }
    if(pJson.isMember("detail"))
    {
        if(!validJsonOfField(2, "detail", pJson["detail"], err, true))
            return false;
    }
    if(pJson.isMember("publisher"))
    {
        if(!validJsonOfField(3, "publisher", pJson["publisher"], err, true))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(4, "is_show", pJson["is_show"], err, true))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(5, "date", pJson["date"], err, true))
            return false;
    }
    else
    {
        err="The date column cannot be null";
        return false;
    }
    return true;
}
bool Notice::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Notice::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("notice_id"))
    {
        if(!validJsonOfField(0, "notice_id", pJson["notice_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("show_text"))
    {
        if(!validJsonOfField(1, "show_text", pJson["show_text"], err, false))
            return false;
    }
    if(pJson.isMember("detail"))
    {
        if(!validJsonOfField(2, "detail", pJson["detail"], err, false))
            return false;
    }
    if(pJson.isMember("publisher"))
    {
        if(!validJsonOfField(3, "publisher", pJson["publisher"], err, false))
            return false;
    }
    if(pJson.isMember("is_show"))
    {
        if(!validJsonOfField(4, "is_show", pJson["is_show"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(5, "date", pJson["date"], err, false))
            return false;
    }
    return true;
}
bool Notice::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Notice::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
