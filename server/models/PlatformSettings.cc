/**
 *
 *  PlatformSettings.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "PlatformSettings.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string PlatformSettings::Cols::_setting_id = "\"setting_id\"";
const std::string PlatformSettings::Cols::_name = "\"name\"";
const std::string PlatformSettings::Cols::_value = "\"value\"";
const std::string PlatformSettings::primaryKeyName = "setting_id";
const bool PlatformSettings::hasPrimaryKey = true;
const std::string PlatformSettings::tableName = "\"platform_settings\"";

const std::vector<typename PlatformSettings::MetaData> PlatformSettings::metaData_={
{"setting_id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",100,0,0,1},
{"value","std::string","character varying",255,0,0,0}
};
const std::string &PlatformSettings::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
PlatformSettings::PlatformSettings(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["setting_id"].isNull())
        {
            settingId_=std::make_shared<int32_t>(r["setting_id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["value"].isNull())
        {
            value_=std::make_shared<std::string>(r["value"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            settingId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            value_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

PlatformSettings::PlatformSettings(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            settingId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            value_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

PlatformSettings::PlatformSettings(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("setting_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["setting_id"].isNull())
        {
            settingId_=std::make_shared<int32_t>((int32_t)pJson["setting_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("value"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["value"].isNull())
        {
            value_=std::make_shared<std::string>(pJson["value"].asString());
        }
    }
}

void PlatformSettings::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            settingId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            value_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void PlatformSettings::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("setting_id"))
    {
        if(!pJson["setting_id"].isNull())
        {
            settingId_=std::make_shared<int32_t>((int32_t)pJson["setting_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("value"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["value"].isNull())
        {
            value_=std::make_shared<std::string>(pJson["value"].asString());
        }
    }
}

const int32_t &PlatformSettings::getValueOfSettingId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(settingId_)
        return *settingId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &PlatformSettings::getSettingId() const noexcept
{
    return settingId_;
}
void PlatformSettings::setSettingId(const int32_t &pSettingId) noexcept
{
    settingId_ = std::make_shared<int32_t>(pSettingId);
    dirtyFlag_[0] = true;
}
const typename PlatformSettings::PrimaryKeyType & PlatformSettings::getPrimaryKey() const
{
    assert(settingId_);
    return *settingId_;
}

const std::string &PlatformSettings::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PlatformSettings::getName() const noexcept
{
    return name_;
}
void PlatformSettings::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void PlatformSettings::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &PlatformSettings::getValueOfValue() const noexcept
{
    static const std::string defaultValue = std::string();
    if(value_)
        return *value_;
    return defaultValue;
}
const std::shared_ptr<std::string> &PlatformSettings::getValue() const noexcept
{
    return value_;
}
void PlatformSettings::setValue(const std::string &pValue) noexcept
{
    value_ = std::make_shared<std::string>(pValue);
    dirtyFlag_[2] = true;
}
void PlatformSettings::setValue(std::string &&pValue) noexcept
{
    value_ = std::make_shared<std::string>(std::move(pValue));
    dirtyFlag_[2] = true;
}
void PlatformSettings::setValueToNull() noexcept
{
    value_.reset();
    dirtyFlag_[2] = true;
}

void PlatformSettings::updateId(const uint64_t id)
{
}

const std::vector<std::string> &PlatformSettings::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "value"
    };
    return inCols;
}

void PlatformSettings::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getValue())
        {
            binder << getValueOfValue();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> PlatformSettings::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void PlatformSettings::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getValue())
        {
            binder << getValueOfValue();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value PlatformSettings::toJson() const
{
    Json::Value ret;
    if(getSettingId())
    {
        ret["setting_id"]=getValueOfSettingId();
    }
    else
    {
        ret["setting_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getValue())
    {
        ret["value"]=getValueOfValue();
    }
    else
    {
        ret["value"]=Json::Value();
    }
    return ret;
}

Json::Value PlatformSettings::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getSettingId())
            {
                ret[pMasqueradingVector[0]]=getValueOfSettingId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getValue())
            {
                ret[pMasqueradingVector[2]]=getValueOfValue();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getSettingId())
    {
        ret["setting_id"]=getValueOfSettingId();
    }
    else
    {
        ret["setting_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getValue())
    {
        ret["value"]=getValueOfValue();
    }
    else
    {
        ret["value"]=Json::Value();
    }
    return ret;
}

bool PlatformSettings::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("setting_id"))
    {
        if(!validJsonOfField(0, "setting_id", pJson["setting_id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("value"))
    {
        if(!validJsonOfField(2, "value", pJson["value"], err, true))
            return false;
    }
    return true;
}
bool PlatformSettings::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                          const std::vector<std::string> &pMasqueradingVector,
                                                          std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PlatformSettings::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("setting_id"))
    {
        if(!validJsonOfField(0, "setting_id", pJson["setting_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("value"))
    {
        if(!validJsonOfField(2, "value", pJson["value"], err, false))
            return false;
    }
    return true;
}
bool PlatformSettings::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool PlatformSettings::validJsonOfField(size_t index,
                                        const std::string &fieldName,
                                        const Json::Value &pJson,
                                        std::string &err,
                                        bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
