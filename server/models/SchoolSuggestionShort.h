/**
 *
 *  SchoolSuggestionShort.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace stufbsys
{

class SchoolSuggestionShort
{
  public:
    struct Cols
    {
        static const std::string _sch_sug_id;
        static const std::string _title;
        static const std::string _content;
        static const std::string _is_public;
        static const std::string _is_anonymous;
        static const std::string _name;
        static const std::string _class;
        static const std::string _grade;
        static const std::string _ai_score;
        static const std::string _type;
        static const std::string _vote_count;
        static const std::string _date;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit SchoolSuggestionShort(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit SchoolSuggestionShort(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    SchoolSuggestionShort(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    SchoolSuggestionShort() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column sch_sug_id  */
    ///Get the value of the column sch_sug_id, returns the default value if the column is null
    const int64_t &getValueOfSchSugId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getSchSugId() const noexcept;
    ///Set the value of the column sch_sug_id
    void setSchSugId(const int64_t &pSchSugId) noexcept;

    /**  For column title  */
    ///Get the value of the column title, returns the default value if the column is null
    const std::string &getValueOfTitle() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTitle() const noexcept;
    ///Set the value of the column title
    void setTitle(const std::string &pTitle) noexcept;
    void setTitle(std::string &&pTitle) noexcept;

    /**  For column content  */
    ///Get the value of the column content, returns the default value if the column is null
    const std::string &getValueOfContent() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getContent() const noexcept;
    ///Set the value of the column content
    void setContent(const std::string &pContent) noexcept;
    void setContent(std::string &&pContent) noexcept;

    /**  For column is_public  */
    ///Get the value of the column is_public, returns the default value if the column is null
    const bool &getValueOfIsPublic() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsPublic() const noexcept;
    ///Set the value of the column is_public
    void setIsPublic(const bool &pIsPublic) noexcept;

    /**  For column is_anonymous  */
    ///Get the value of the column is_anonymous, returns the default value if the column is null
    const bool &getValueOfIsAnonymous() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<bool> &getIsAnonymous() const noexcept;
    ///Set the value of the column is_anonymous
    void setIsAnonymous(const bool &pIsAnonymous) noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;
    void setNameToNull() noexcept;

    /**  For column class  */
    ///Get the value of the column class, returns the default value if the column is null
    const std::string &getValueOfClass() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getClass() const noexcept;
    ///Set the value of the column class
    void setClass(const std::string &pClass) noexcept;
    void setClass(std::string &&pClass) noexcept;
    void setClassToNull() noexcept;

    /**  For column grade  */
    ///Get the value of the column grade, returns the default value if the column is null
    const std::string &getValueOfGrade() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGrade() const noexcept;
    ///Set the value of the column grade
    void setGrade(const std::string &pGrade) noexcept;
    void setGrade(std::string &&pGrade) noexcept;
    void setGradeToNull() noexcept;

    /**  For column ai_score  */
    ///Get the value of the column ai_score, returns the default value if the column is null
    const float &getValueOfAiScore() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<float> &getAiScore() const noexcept;
    ///Set the value of the column ai_score
    void setAiScore(const float &pAiScore) noexcept;
    void setAiScoreToNull() noexcept;

    /**  For column type  */
    ///Get the value of the column type, returns the default value if the column is null
    const short &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<short> &getType() const noexcept;
    ///Set the value of the column type
    void setType(const short &pType) noexcept;

    /**  For column vote_count  */
    ///Get the value of the column vote_count, returns the default value if the column is null
    const int32_t &getValueOfVoteCount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getVoteCount() const noexcept;
    ///Set the value of the column vote_count
    void setVoteCount(const int32_t &pVoteCount) noexcept;
    void setVoteCountToNull() noexcept;

    /**  For column date  */
    ///Get the value of the column date, returns the default value if the column is null
    const ::trantor::Date &getValueOfDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getDate() const noexcept;
    ///Set the value of the column date
    void setDate(const ::trantor::Date &pDate) noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<SchoolSuggestionShort>;
    friend drogon::orm::BaseBuilder<SchoolSuggestionShort, true, true>;
    friend drogon::orm::BaseBuilder<SchoolSuggestionShort, true, false>;
    friend drogon::orm::BaseBuilder<SchoolSuggestionShort, false, true>;
    friend drogon::orm::BaseBuilder<SchoolSuggestionShort, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<SchoolSuggestionShort>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> schSugId_;
    std::shared_ptr<std::string> title_;
    std::shared_ptr<std::string> content_;
    std::shared_ptr<bool> isPublic_;
    std::shared_ptr<bool> isAnonymous_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> class_;
    std::shared_ptr<std::string> grade_;
    std::shared_ptr<float> aiScore_;
    std::shared_ptr<short> type_;
    std::shared_ptr<int32_t> voteCount_;
    std::shared_ptr<::trantor::Date> date_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where sch_sug_id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where sch_sug_id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "sch_sug_id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "title,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "content,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "is_public,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "is_anonymous,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "class,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "grade,";
            ++parametersCount;
        }
        sql += "ai_score,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "type,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "vote_count,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "date,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace stufbsys
} // namespace drogon_model
