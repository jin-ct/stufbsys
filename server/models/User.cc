/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string User::Cols::_user_id = "\"user_id\"";
const std::string User::Cols::_unique_identification = "\"unique_identification\"";
const std::string User::Cols::_verify_image_true = "\"verify_image_true\"";
const std::string User::Cols::_verify_image_false = "\"verify_image_false\"";
const std::string User::Cols::_fast_key = "\"fast_key\"";
const std::string User::Cols::_ip_address = "\"ip_address\"";
const std::string User::primaryKeyName = "user_id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "\"user\"";

const std::vector<typename User::MetaData> User::metaData_={
{"user_id","int64_t","bigint",8,1,1,1},
{"unique_identification","std::string","character varying",255,0,0,0},
{"verify_image_true","std::string","text",0,0,0,0},
{"verify_image_false","std::string","text",0,0,0,0},
{"fast_key","std::string","text",0,0,0,1},
{"ip_address","std::string","character varying",255,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["unique_identification"].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(r["unique_identification"].as<std::string>());
        }
        if(!r["verify_image_true"].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(r["verify_image_true"].as<std::string>());
        }
        if(!r["verify_image_false"].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(r["verify_image_false"].as<std::string>());
        }
        if(!r["fast_key"].isNull())
        {
            fastKey_=std::make_shared<std::string>(r["fast_key"].as<std::string>());
        }
        if(!r["ip_address"].isNull())
        {
            ipAddress_=std::make_shared<std::string>(r["ip_address"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fastKey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            ipAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fastKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ipAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("unique_identification"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["unique_identification"].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(pJson["unique_identification"].asString());
        }
    }
    if(pJson.isMember("verify_image_true"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["verify_image_true"].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(pJson["verify_image_true"].asString());
        }
    }
    if(pJson.isMember("verify_image_false"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["verify_image_false"].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(pJson["verify_image_false"].asString());
        }
    }
    if(pJson.isMember("fast_key"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["fast_key"].isNull())
        {
            fastKey_=std::make_shared<std::string>(pJson["fast_key"].asString());
        }
    }
    if(pJson.isMember("ip_address"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["ip_address"].isNull())
        {
            ipAddress_=std::make_shared<std::string>(pJson["ip_address"].asString());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fastKey_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            ipAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("unique_identification"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["unique_identification"].isNull())
        {
            uniqueIdentification_=std::make_shared<std::string>(pJson["unique_identification"].asString());
        }
    }
    if(pJson.isMember("verify_image_true"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["verify_image_true"].isNull())
        {
            verifyImageTrue_=std::make_shared<std::string>(pJson["verify_image_true"].asString());
        }
    }
    if(pJson.isMember("verify_image_false"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["verify_image_false"].isNull())
        {
            verifyImageFalse_=std::make_shared<std::string>(pJson["verify_image_false"].asString());
        }
    }
    if(pJson.isMember("fast_key"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["fast_key"].isNull())
        {
            fastKey_=std::make_shared<std::string>(pJson["fast_key"].asString());
        }
    }
    if(pJson.isMember("ip_address"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["ip_address"].isNull())
        {
            ipAddress_=std::make_shared<std::string>(pJson["ip_address"].asString());
        }
    }
}

const int64_t &User::getValueOfUserId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &User::getUserId() const noexcept
{
    return userId_;
}
void User::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[0] = true;
}
const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(userId_);
    return *userId_;
}

const std::string &User::getValueOfUniqueIdentification() const noexcept
{
    static const std::string defaultValue = std::string();
    if(uniqueIdentification_)
        return *uniqueIdentification_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getUniqueIdentification() const noexcept
{
    return uniqueIdentification_;
}
void User::setUniqueIdentification(const std::string &pUniqueIdentification) noexcept
{
    uniqueIdentification_ = std::make_shared<std::string>(pUniqueIdentification);
    dirtyFlag_[1] = true;
}
void User::setUniqueIdentification(std::string &&pUniqueIdentification) noexcept
{
    uniqueIdentification_ = std::make_shared<std::string>(std::move(pUniqueIdentification));
    dirtyFlag_[1] = true;
}
void User::setUniqueIdentificationToNull() noexcept
{
    uniqueIdentification_.reset();
    dirtyFlag_[1] = true;
}

const std::string &User::getValueOfVerifyImageTrue() const noexcept
{
    static const std::string defaultValue = std::string();
    if(verifyImageTrue_)
        return *verifyImageTrue_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getVerifyImageTrue() const noexcept
{
    return verifyImageTrue_;
}
void User::setVerifyImageTrue(const std::string &pVerifyImageTrue) noexcept
{
    verifyImageTrue_ = std::make_shared<std::string>(pVerifyImageTrue);
    dirtyFlag_[2] = true;
}
void User::setVerifyImageTrue(std::string &&pVerifyImageTrue) noexcept
{
    verifyImageTrue_ = std::make_shared<std::string>(std::move(pVerifyImageTrue));
    dirtyFlag_[2] = true;
}
void User::setVerifyImageTrueToNull() noexcept
{
    verifyImageTrue_.reset();
    dirtyFlag_[2] = true;
}

const std::string &User::getValueOfVerifyImageFalse() const noexcept
{
    static const std::string defaultValue = std::string();
    if(verifyImageFalse_)
        return *verifyImageFalse_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getVerifyImageFalse() const noexcept
{
    return verifyImageFalse_;
}
void User::setVerifyImageFalse(const std::string &pVerifyImageFalse) noexcept
{
    verifyImageFalse_ = std::make_shared<std::string>(pVerifyImageFalse);
    dirtyFlag_[3] = true;
}
void User::setVerifyImageFalse(std::string &&pVerifyImageFalse) noexcept
{
    verifyImageFalse_ = std::make_shared<std::string>(std::move(pVerifyImageFalse));
    dirtyFlag_[3] = true;
}
void User::setVerifyImageFalseToNull() noexcept
{
    verifyImageFalse_.reset();
    dirtyFlag_[3] = true;
}

const std::string &User::getValueOfFastKey() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fastKey_)
        return *fastKey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getFastKey() const noexcept
{
    return fastKey_;
}
void User::setFastKey(const std::string &pFastKey) noexcept
{
    fastKey_ = std::make_shared<std::string>(pFastKey);
    dirtyFlag_[4] = true;
}
void User::setFastKey(std::string &&pFastKey) noexcept
{
    fastKey_ = std::make_shared<std::string>(std::move(pFastKey));
    dirtyFlag_[4] = true;
}

const std::string &User::getValueOfIpAddress() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ipAddress_)
        return *ipAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getIpAddress() const noexcept
{
    return ipAddress_;
}
void User::setIpAddress(const std::string &pIpAddress) noexcept
{
    ipAddress_ = std::make_shared<std::string>(pIpAddress);
    dirtyFlag_[5] = true;
}
void User::setIpAddress(std::string &&pIpAddress) noexcept
{
    ipAddress_ = std::make_shared<std::string>(std::move(pIpAddress));
    dirtyFlag_[5] = true;
}
void User::setIpAddressToNull() noexcept
{
    ipAddress_.reset();
    dirtyFlag_[5] = true;
}

void User::updateId(const uint64_t id)
{
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "unique_identification",
        "verify_image_true",
        "verify_image_false",
        "fast_key",
        "ip_address"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUniqueIdentification())
        {
            binder << getValueOfUniqueIdentification();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVerifyImageTrue())
        {
            binder << getValueOfVerifyImageTrue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVerifyImageFalse())
        {
            binder << getValueOfVerifyImageFalse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFastKey())
        {
            binder << getValueOfFastKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIpAddress())
        {
            binder << getValueOfIpAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getUniqueIdentification())
        {
            binder << getValueOfUniqueIdentification();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getVerifyImageTrue())
        {
            binder << getValueOfVerifyImageTrue();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVerifyImageFalse())
        {
            binder << getValueOfVerifyImageFalse();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFastKey())
        {
            binder << getValueOfFastKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIpAddress())
        {
            binder << getValueOfIpAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getUniqueIdentification())
    {
        ret["unique_identification"]=getValueOfUniqueIdentification();
    }
    else
    {
        ret["unique_identification"]=Json::Value();
    }
    if(getVerifyImageTrue())
    {
        ret["verify_image_true"]=getValueOfVerifyImageTrue();
    }
    else
    {
        ret["verify_image_true"]=Json::Value();
    }
    if(getVerifyImageFalse())
    {
        ret["verify_image_false"]=getValueOfVerifyImageFalse();
    }
    else
    {
        ret["verify_image_false"]=Json::Value();
    }
    if(getFastKey())
    {
        ret["fast_key"]=getValueOfFastKey();
    }
    else
    {
        ret["fast_key"]=Json::Value();
    }
    if(getIpAddress())
    {
        ret["ip_address"]=getValueOfIpAddress();
    }
    else
    {
        ret["ip_address"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUniqueIdentification())
            {
                ret[pMasqueradingVector[1]]=getValueOfUniqueIdentification();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getVerifyImageTrue())
            {
                ret[pMasqueradingVector[2]]=getValueOfVerifyImageTrue();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getVerifyImageFalse())
            {
                ret[pMasqueradingVector[3]]=getValueOfVerifyImageFalse();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFastKey())
            {
                ret[pMasqueradingVector[4]]=getValueOfFastKey();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIpAddress())
            {
                ret[pMasqueradingVector[5]]=getValueOfIpAddress();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getUniqueIdentification())
    {
        ret["unique_identification"]=getValueOfUniqueIdentification();
    }
    else
    {
        ret["unique_identification"]=Json::Value();
    }
    if(getVerifyImageTrue())
    {
        ret["verify_image_true"]=getValueOfVerifyImageTrue();
    }
    else
    {
        ret["verify_image_true"]=Json::Value();
    }
    if(getVerifyImageFalse())
    {
        ret["verify_image_false"]=getValueOfVerifyImageFalse();
    }
    else
    {
        ret["verify_image_false"]=Json::Value();
    }
    if(getFastKey())
    {
        ret["fast_key"]=getValueOfFastKey();
    }
    else
    {
        ret["fast_key"]=Json::Value();
    }
    if(getIpAddress())
    {
        ret["ip_address"]=getValueOfIpAddress();
    }
    else
    {
        ret["ip_address"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    if(pJson.isMember("unique_identification"))
    {
        if(!validJsonOfField(1, "unique_identification", pJson["unique_identification"], err, true))
            return false;
    }
    if(pJson.isMember("verify_image_true"))
    {
        if(!validJsonOfField(2, "verify_image_true", pJson["verify_image_true"], err, true))
            return false;
    }
    if(pJson.isMember("verify_image_false"))
    {
        if(!validJsonOfField(3, "verify_image_false", pJson["verify_image_false"], err, true))
            return false;
    }
    if(pJson.isMember("fast_key"))
    {
        if(!validJsonOfField(4, "fast_key", pJson["fast_key"], err, true))
            return false;
    }
    else
    {
        err="The fast_key column cannot be null";
        return false;
    }
    if(pJson.isMember("ip_address"))
    {
        if(!validJsonOfField(5, "ip_address", pJson["ip_address"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("unique_identification"))
    {
        if(!validJsonOfField(1, "unique_identification", pJson["unique_identification"], err, false))
            return false;
    }
    if(pJson.isMember("verify_image_true"))
    {
        if(!validJsonOfField(2, "verify_image_true", pJson["verify_image_true"], err, false))
            return false;
    }
    if(pJson.isMember("verify_image_false"))
    {
        if(!validJsonOfField(3, "verify_image_false", pJson["verify_image_false"], err, false))
            return false;
    }
    if(pJson.isMember("fast_key"))
    {
        if(!validJsonOfField(4, "fast_key", pJson["fast_key"], err, false))
            return false;
    }
    if(pJson.isMember("ip_address"))
    {
        if(!validJsonOfField(5, "ip_address", pJson["ip_address"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
