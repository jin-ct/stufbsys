/**
 *
 *  EntranceExam.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "EntranceExam.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string EntranceExam::Cols::_question_id = "\"question_id\"";
const std::string EntranceExam::Cols::_type = "\"type\"";
const std::string EntranceExam::Cols::_question = "\"question\"";
const std::string EntranceExam::Cols::_answer = "\"answer\"";
const std::string EntranceExam::primaryKeyName = "question_id";
const bool EntranceExam::hasPrimaryKey = true;
const std::string EntranceExam::tableName = "\"entrance_exam\"";

const std::vector<typename EntranceExam::MetaData> EntranceExam::metaData_={
{"question_id","int64_t","bigint",8,1,1,1},
{"type","short","smallint",2,0,0,1},
{"question","std::string","text",0,0,0,1},
{"answer","std::string","character varying",100,0,0,1}
};
const std::string &EntranceExam::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
EntranceExam::EntranceExam(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["question_id"].isNull())
        {
            questionId_=std::make_shared<int64_t>(r["question_id"].as<int64_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<short>(r["type"].as<short>());
        }
        if(!r["question"].isNull())
        {
            question_=std::make_shared<std::string>(r["question"].as<std::string>());
        }
        if(!r["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(r["answer"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            questionId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            type_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            question_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            answer_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

EntranceExam::EntranceExam(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            questionId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<short>((short)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            question_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            answer_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
}

EntranceExam::EntranceExam(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("question_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["question_id"].isNull())
        {
            questionId_=std::make_shared<int64_t>((int64_t)pJson["question_id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<short>((short)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("question"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["question"].isNull())
        {
            question_=std::make_shared<std::string>(pJson["question"].asString());
        }
    }
    if(pJson.isMember("answer"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(pJson["answer"].asString());
        }
    }
}

void EntranceExam::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            questionId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<short>((short)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            question_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            answer_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
}

void EntranceExam::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("question_id"))
    {
        if(!pJson["question_id"].isNull())
        {
            questionId_=std::make_shared<int64_t>((int64_t)pJson["question_id"].asInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<short>((short)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("question"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["question"].isNull())
        {
            question_=std::make_shared<std::string>(pJson["question"].asString());
        }
    }
    if(pJson.isMember("answer"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(pJson["answer"].asString());
        }
    }
}

const int64_t &EntranceExam::getValueOfQuestionId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(questionId_)
        return *questionId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &EntranceExam::getQuestionId() const noexcept
{
    return questionId_;
}
void EntranceExam::setQuestionId(const int64_t &pQuestionId) noexcept
{
    questionId_ = std::make_shared<int64_t>(pQuestionId);
    dirtyFlag_[0] = true;
}
const typename EntranceExam::PrimaryKeyType & EntranceExam::getPrimaryKey() const
{
    assert(questionId_);
    return *questionId_;
}

const short &EntranceExam::getValueOfType() const noexcept
{
    static const short defaultValue = short();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<short> &EntranceExam::getType() const noexcept
{
    return type_;
}
void EntranceExam::setType(const short &pType) noexcept
{
    type_ = std::make_shared<short>(pType);
    dirtyFlag_[1] = true;
}

const std::string &EntranceExam::getValueOfQuestion() const noexcept
{
    static const std::string defaultValue = std::string();
    if(question_)
        return *question_;
    return defaultValue;
}
const std::shared_ptr<std::string> &EntranceExam::getQuestion() const noexcept
{
    return question_;
}
void EntranceExam::setQuestion(const std::string &pQuestion) noexcept
{
    question_ = std::make_shared<std::string>(pQuestion);
    dirtyFlag_[2] = true;
}
void EntranceExam::setQuestion(std::string &&pQuestion) noexcept
{
    question_ = std::make_shared<std::string>(std::move(pQuestion));
    dirtyFlag_[2] = true;
}

const std::string &EntranceExam::getValueOfAnswer() const noexcept
{
    static const std::string defaultValue = std::string();
    if(answer_)
        return *answer_;
    return defaultValue;
}
const std::shared_ptr<std::string> &EntranceExam::getAnswer() const noexcept
{
    return answer_;
}
void EntranceExam::setAnswer(const std::string &pAnswer) noexcept
{
    answer_ = std::make_shared<std::string>(pAnswer);
    dirtyFlag_[3] = true;
}
void EntranceExam::setAnswer(std::string &&pAnswer) noexcept
{
    answer_ = std::make_shared<std::string>(std::move(pAnswer));
    dirtyFlag_[3] = true;
}

void EntranceExam::updateId(const uint64_t id)
{
}

const std::vector<std::string> &EntranceExam::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "type",
        "question",
        "answer"
    };
    return inCols;
}

void EntranceExam::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getQuestion())
        {
            binder << getValueOfQuestion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAnswer())
        {
            binder << getValueOfAnswer();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> EntranceExam::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void EntranceExam::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getQuestion())
        {
            binder << getValueOfQuestion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAnswer())
        {
            binder << getValueOfAnswer();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value EntranceExam::toJson() const
{
    Json::Value ret;
    if(getQuestionId())
    {
        ret["question_id"]=(Json::Int64)getValueOfQuestionId();
    }
    else
    {
        ret["question_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getQuestion())
    {
        ret["question"]=getValueOfQuestion();
    }
    else
    {
        ret["question"]=Json::Value();
    }
    if(getAnswer())
    {
        ret["answer"]=getValueOfAnswer();
    }
    else
    {
        ret["answer"]=Json::Value();
    }
    return ret;
}

Json::Value EntranceExam::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getQuestionId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfQuestionId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getQuestion())
            {
                ret[pMasqueradingVector[2]]=getValueOfQuestion();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAnswer())
            {
                ret[pMasqueradingVector[3]]=getValueOfAnswer();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getQuestionId())
    {
        ret["question_id"]=(Json::Int64)getValueOfQuestionId();
    }
    else
    {
        ret["question_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getQuestion())
    {
        ret["question"]=getValueOfQuestion();
    }
    else
    {
        ret["question"]=Json::Value();
    }
    if(getAnswer())
    {
        ret["answer"]=getValueOfAnswer();
    }
    else
    {
        ret["answer"]=Json::Value();
    }
    return ret;
}

bool EntranceExam::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("question_id"))
    {
        if(!validJsonOfField(0, "question_id", pJson["question_id"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("question"))
    {
        if(!validJsonOfField(2, "question", pJson["question"], err, true))
            return false;
    }
    else
    {
        err="The question column cannot be null";
        return false;
    }
    if(pJson.isMember("answer"))
    {
        if(!validJsonOfField(3, "answer", pJson["answer"], err, true))
            return false;
    }
    else
    {
        err="The answer column cannot be null";
        return false;
    }
    return true;
}
bool EntranceExam::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool EntranceExam::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("question_id"))
    {
        if(!validJsonOfField(0, "question_id", pJson["question_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("question"))
    {
        if(!validJsonOfField(2, "question", pJson["question"], err, false))
            return false;
    }
    if(pJson.isMember("answer"))
    {
        if(!validJsonOfField(3, "answer", pJson["answer"], err, false))
            return false;
    }
    return true;
}
bool EntranceExam::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool EntranceExam::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
