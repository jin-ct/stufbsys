/**
 *
 *  Dish.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Dish.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string Dish::Cols::_dish_id = "\"dish_id\"";
const std::string Dish::Cols::_name = "\"name\"";
const std::string Dish::Cols::_description = "\"description\"";
const std::string Dish::Cols::_avg_score = "\"avg_score\"";
const std::string Dish::Cols::_lastest_evaluate = "\"lastest_evaluate\"";
const std::string Dish::Cols::_evaluate_count = "\"evaluate_count\"";
const std::string Dish::Cols::_date = "\"date\"";
const std::string Dish::primaryKeyName = "dish_id";
const bool Dish::hasPrimaryKey = true;
const std::string Dish::tableName = "\"dish\"";

const std::vector<typename Dish::MetaData> Dish::metaData_={
{"dish_id","int64_t","bigint",8,1,1,1},
{"name","std::string","character varying",20,0,0,1},
{"description","std::string","character varying",255,0,0,0},
{"avg_score","float","real",4,0,0,0},
{"lastest_evaluate","std::string","character varying",255,0,0,0},
{"evaluate_count","int32_t","integer",4,0,0,0},
{"date","::trantor::Date","date",0,0,0,1}
};
const std::string &Dish::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Dish::Dish(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["dish_id"].isNull())
        {
            dishId_=std::make_shared<int64_t>(r["dish_id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["avg_score"].isNull())
        {
            avgScore_=std::make_shared<float>(r["avg_score"].as<float>());
        }
        if(!r["lastest_evaluate"].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(r["lastest_evaluate"].as<std::string>());
        }
        if(!r["evaluate_count"].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>(r["evaluate_count"].as<int32_t>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            dishId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            avgScore_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

Dish::Dish(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            dishId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            avgScore_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
     }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

Dish::Dish(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dish_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<int64_t>((int64_t)pJson["dish_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("avg_score"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["avg_score"].isNull())
        {
            avgScore_=std::make_shared<float>(pJson["avg_score"].asFloat());
        }
     }
    if(pJson.isMember("lastest_evaluate"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["lastest_evaluate"].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(pJson["lastest_evaluate"].asString());
        }
    }
    if(pJson.isMember("evaluate_count"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["evaluate_count"].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>((int32_t)pJson["evaluate_count"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Dish::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            dishId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            avgScore_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void Dish::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dish_id"))
    {
        if(!pJson["dish_id"].isNull())
        {
            dishId_=std::make_shared<int64_t>((int64_t)pJson["dish_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("avg_score"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["avg_score"].isNull())
        {
            avgScore_=std::make_shared<float>(pJson["avg_score"].asFloat());
        }
    }
    if(pJson.isMember("lastest_evaluate"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["lastest_evaluate"].isNull())
        {
            lastestEvaluate_=std::make_shared<std::string>(pJson["lastest_evaluate"].asString());
        }
    }
    if(pJson.isMember("evaluate_count"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["evaluate_count"].isNull())
        {
            evaluateCount_=std::make_shared<int32_t>((int32_t)pJson["evaluate_count"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int64_t &Dish::getValueOfDishId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(dishId_)
        return *dishId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Dish::getDishId() const noexcept
{
    return dishId_;
}
void Dish::setDishId(const int64_t &pDishId) noexcept
{
    dishId_ = std::make_shared<int64_t>(pDishId);
    dirtyFlag_[0] = true;
}
const typename Dish::PrimaryKeyType & Dish::getPrimaryKey() const
{
    assert(dishId_);
    return *dishId_;
}

const std::string &Dish::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getName() const noexcept
{
    return name_;
}
void Dish::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Dish::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Dish::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getDescription() const noexcept
{
    return description_;
}
void Dish::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}
void Dish::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[2] = true;
}
void Dish::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[2] = true;
}

const float &Dish::getValueOfAvgScore() const noexcept
{
    static const float defaultValue = float();
    if(avgScore_)
        return *avgScore_;
    return defaultValue;
}
const std::shared_ptr<float> &Dish::getAvgScore() const noexcept
{
    return avgScore_;
}
void Dish::setAvgScore(const float &pAvgScore) noexcept
{
    avgScore_ = std::make_shared<float>(pAvgScore);
    dirtyFlag_[3] = true;
}
void Dish::setAvgScoreToNull() noexcept
{
    avgScore_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Dish::getValueOfLastestEvaluate() const noexcept
{
    static const std::string defaultValue = std::string();
    if(lastestEvaluate_)
        return *lastestEvaluate_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Dish::getLastestEvaluate() const noexcept
{
    return lastestEvaluate_;
}
void Dish::setLastestEvaluate(const std::string &pLastestEvaluate) noexcept
{
    lastestEvaluate_ = std::make_shared<std::string>(pLastestEvaluate);
    dirtyFlag_[4] = true;
}
void Dish::setLastestEvaluate(std::string &&pLastestEvaluate) noexcept
{
    lastestEvaluate_ = std::make_shared<std::string>(std::move(pLastestEvaluate));
    dirtyFlag_[4] = true;
}
void Dish::setLastestEvaluateToNull() noexcept
{
    lastestEvaluate_.reset();
    dirtyFlag_[4] = true;
}

const int32_t &Dish::getValueOfEvaluateCount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(evaluateCount_)
        return *evaluateCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Dish::getEvaluateCount() const noexcept
{
    return evaluateCount_;
}
void Dish::setEvaluateCount(const int32_t &pEvaluateCount) noexcept
{
    evaluateCount_ = std::make_shared<int32_t>(pEvaluateCount);
    dirtyFlag_[5] = true;
}
void Dish::setEvaluateCountToNull() noexcept
{
    evaluateCount_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Dish::getValueOfDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Dish::getDate() const noexcept
{
    return date_;
}
void Dish::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[6] = true;
}

void Dish::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Dish::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "description",
        "avg_score",
        "lastest_evaluate",
        "evaluate_count",
        "date"
    };
    return inCols;
}

void Dish::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAvgScore())
        {
            binder << getValueOfAvgScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastestEvaluate())
        {
            binder << getValueOfLastestEvaluate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEvaluateCount())
        {
            binder << getValueOfEvaluateCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Dish::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Dish::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAvgScore())
        {
            binder << getValueOfAvgScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLastestEvaluate())
        {
            binder << getValueOfLastestEvaluate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEvaluateCount())
        {
            binder << getValueOfEvaluateCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Dish::toJson() const
{
    Json::Value ret;
    if(getDishId())
    {
        ret["dish_id"]=(Json::Int64)getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAvgScore())
    {
        ret["avg_score"]=getValueOfAvgScore();
    }
    else
    {
        ret["avg_score"]=Json::Value();
    }
    if(getLastestEvaluate())
    {
        ret["lastest_evaluate"]=getValueOfLastestEvaluate();
    }
    else
    {
        ret["lastest_evaluate"]=Json::Value();
    }
    if(getEvaluateCount())
    {
        ret["evaluate_count"]=getValueOfEvaluateCount();
    }
    else
    {
        ret["evaluate_count"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

Json::Value Dish::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getDishId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfDishId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAvgScore())
            {
                ret[pMasqueradingVector[3]]=getValueOfAvgScore();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLastestEvaluate())
            {
                ret[pMasqueradingVector[4]]=getValueOfLastestEvaluate();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEvaluateCount())
            {
                ret[pMasqueradingVector[5]]=getValueOfEvaluateCount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[6]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getDishId())
    {
        ret["dish_id"]=(Json::Int64)getValueOfDishId();
    }
    else
    {
        ret["dish_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAvgScore())
    {
        ret["avg_score"]=getValueOfAvgScore();
    }
    else
    {
        ret["avg_score"]=Json::Value();
    }
    if(getLastestEvaluate())
    {
        ret["lastest_evaluate"]=getValueOfLastestEvaluate();
    }
    else
    {
        ret["lastest_evaluate"]=Json::Value();
    }
    if(getEvaluateCount())
    {
        ret["evaluate_count"]=getValueOfEvaluateCount();
    }
    else
    {
        ret["evaluate_count"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

bool Dish::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(0, "dish_id", pJson["dish_id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("avg_score"))
    {
        if(!validJsonOfField(3, "avg_score", pJson["avg_score"], err, true))
            return false;
    }
    if(pJson.isMember("lastest_evaluate"))
    {
        if(!validJsonOfField(4, "lastest_evaluate", pJson["lastest_evaluate"], err, true))
            return false;
    }
    if(pJson.isMember("evaluate_count"))
    {
        if(!validJsonOfField(5, "evaluate_count", pJson["evaluate_count"], err, true))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(6, "date", pJson["date"], err, true))
            return false;
    }
    else
    {
        err="The date column cannot be null";
        return false;
    }
    return true;
}
bool Dish::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Dish::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dish_id"))
    {
        if(!validJsonOfField(0, "dish_id", pJson["dish_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("avg_score"))
    {
        if(!validJsonOfField(3, "avg_score", pJson["avg_score"], err, false))
            return false;
    }
    if(pJson.isMember("lastest_evaluate"))
    {
        if(!validJsonOfField(4, "lastest_evaluate", pJson["lastest_evaluate"], err, false))
            return false;
    }
    if(pJson.isMember("evaluate_count"))
    {
        if(!validJsonOfField(5, "evaluate_count", pJson["evaluate_count"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(6, "date", pJson["date"], err, false))
            return false;
    }
    return true;
}
bool Dish::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Dish::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
