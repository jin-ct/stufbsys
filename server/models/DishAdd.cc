/**
 *
 *  DishAdd.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DishAdd.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string DishAdd::Cols::_add_id = "\"add_id\"";
const std::string DishAdd::Cols::_name = "\"name\"";
const std::string DishAdd::Cols::_description = "\"description\"";
const std::string DishAdd::Cols::_ai_score = "\"ai_score\"";
const std::string DishAdd::Cols::_state = "\"state\"";
const std::string DishAdd::Cols::_vote_count = "\"vote_count\"";
const std::string DishAdd::Cols::_user_id = "\"user_id\"";
const std::string DishAdd::Cols::_date = "\"date\"";
const std::string DishAdd::primaryKeyName = "add_id";
const bool DishAdd::hasPrimaryKey = true;
const std::string DishAdd::tableName = "\"dish_add\"";

const std::vector<typename DishAdd::MetaData> DishAdd::metaData_={
{"add_id","int64_t","bigint",8,1,1,1},
{"name","std::string","character varying",30,0,0,1},
{"description","std::string","character varying",255,0,0,0},
{"ai_score","float","real",4,0,0,0},
{"state","short","smallint",2,0,0,1},
{"vote_count","int32_t","integer",4,0,0,0},
{"user_id","int64_t","bigint",8,0,0,1},
{"date","::trantor::Date","date",0,0,0,1}
};
const std::string &DishAdd::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
DishAdd::DishAdd(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["add_id"].isNull())
        {
            addId_=std::make_shared<int64_t>(r["add_id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(r["ai_score"].as<float>());
        }
        if(!r["state"].isNull())
        {
            state_=std::make_shared<short>(r["state"].as<short>());
        }
        if(!r["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>(r["vote_count"].as<int32_t>());
        }
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>(r["user_id"].as<int64_t>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            addId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            aiScore_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            state_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            voteCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

DishAdd::DishAdd(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            addId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            aiScore_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
     }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            state_=std::make_shared<short>((short)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

DishAdd::DishAdd(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("add_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["add_id"].isNull())
        {
            addId_=std::make_shared<int64_t>((int64_t)pJson["add_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("ai_score"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(pJson["ai_score"].asFloat());
        }
     }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<short>((short)pJson["state"].asInt64());
        }
    }
    if(pJson.isMember("vote_count"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson["vote_count"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void DishAdd::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            addId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            aiScore_=std::make_shared<float>(pJson[pMasqueradingVector[3]].asFloat());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            state_=std::make_shared<short>((short)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void DishAdd::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("add_id"))
    {
        if(!pJson["add_id"].isNull())
        {
            addId_=std::make_shared<int64_t>((int64_t)pJson["add_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("ai_score"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(pJson["ai_score"].asFloat());
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<short>((short)pJson["state"].asInt64());
        }
    }
    if(pJson.isMember("vote_count"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson["vote_count"].asInt64());
        }
    }
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int64_t>((int64_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int64_t &DishAdd::getValueOfAddId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(addId_)
        return *addId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &DishAdd::getAddId() const noexcept
{
    return addId_;
}
void DishAdd::setAddId(const int64_t &pAddId) noexcept
{
    addId_ = std::make_shared<int64_t>(pAddId);
    dirtyFlag_[0] = true;
}
const typename DishAdd::PrimaryKeyType & DishAdd::getPrimaryKey() const
{
    assert(addId_);
    return *addId_;
}

const std::string &DishAdd::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DishAdd::getName() const noexcept
{
    return name_;
}
void DishAdd::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void DishAdd::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &DishAdd::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DishAdd::getDescription() const noexcept
{
    return description_;
}
void DishAdd::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}
void DishAdd::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[2] = true;
}
void DishAdd::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[2] = true;
}

const float &DishAdd::getValueOfAiScore() const noexcept
{
    static const float defaultValue = float();
    if(aiScore_)
        return *aiScore_;
    return defaultValue;
}
const std::shared_ptr<float> &DishAdd::getAiScore() const noexcept
{
    return aiScore_;
}
void DishAdd::setAiScore(const float &pAiScore) noexcept
{
    aiScore_ = std::make_shared<float>(pAiScore);
    dirtyFlag_[3] = true;
}
void DishAdd::setAiScoreToNull() noexcept
{
    aiScore_.reset();
    dirtyFlag_[3] = true;
}

const short &DishAdd::getValueOfState() const noexcept
{
    static const short defaultValue = short();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<short> &DishAdd::getState() const noexcept
{
    return state_;
}
void DishAdd::setState(const short &pState) noexcept
{
    state_ = std::make_shared<short>(pState);
    dirtyFlag_[4] = true;
}

const int32_t &DishAdd::getValueOfVoteCount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(voteCount_)
        return *voteCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DishAdd::getVoteCount() const noexcept
{
    return voteCount_;
}
void DishAdd::setVoteCount(const int32_t &pVoteCount) noexcept
{
    voteCount_ = std::make_shared<int32_t>(pVoteCount);
    dirtyFlag_[5] = true;
}
void DishAdd::setVoteCountToNull() noexcept
{
    voteCount_.reset();
    dirtyFlag_[5] = true;
}

const int64_t &DishAdd::getValueOfUserId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &DishAdd::getUserId() const noexcept
{
    return userId_;
}
void DishAdd::setUserId(const int64_t &pUserId) noexcept
{
    userId_ = std::make_shared<int64_t>(pUserId);
    dirtyFlag_[6] = true;
}

const ::trantor::Date &DishAdd::getValueOfDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DishAdd::getDate() const noexcept
{
    return date_;
}
void DishAdd::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[7] = true;
}

void DishAdd::updateId(const uint64_t id)
{
}

const std::vector<std::string> &DishAdd::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "description",
        "ai_score",
        "state",
        "vote_count",
        "user_id",
        "date"
    };
    return inCols;
}

void DishAdd::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAiScore())
        {
            binder << getValueOfAiScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVoteCount())
        {
            binder << getValueOfVoteCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> DishAdd::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void DishAdd::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAiScore())
        {
            binder << getValueOfAiScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVoteCount())
        {
            binder << getValueOfVoteCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DishAdd::toJson() const
{
    Json::Value ret;
    if(getAddId())
    {
        ret["add_id"]=(Json::Int64)getValueOfAddId();
    }
    else
    {
        ret["add_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAiScore())
    {
        ret["ai_score"]=getValueOfAiScore();
    }
    else
    {
        ret["ai_score"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getVoteCount())
    {
        ret["vote_count"]=getValueOfVoteCount();
    }
    else
    {
        ret["vote_count"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

Json::Value DishAdd::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAddId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfAddId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAiScore())
            {
                ret[pMasqueradingVector[3]]=getValueOfAiScore();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[4]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getVoteCount())
            {
                ret[pMasqueradingVector[5]]=getValueOfVoteCount();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[7]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAddId())
    {
        ret["add_id"]=(Json::Int64)getValueOfAddId();
    }
    else
    {
        ret["add_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getAiScore())
    {
        ret["ai_score"]=getValueOfAiScore();
    }
    else
    {
        ret["ai_score"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getVoteCount())
    {
        ret["vote_count"]=getValueOfVoteCount();
    }
    else
    {
        ret["vote_count"]=Json::Value();
    }
    if(getUserId())
    {
        ret["user_id"]=(Json::Int64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

bool DishAdd::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("add_id"))
    {
        if(!validJsonOfField(0, "add_id", pJson["add_id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("ai_score"))
    {
        if(!validJsonOfField(3, "ai_score", pJson["ai_score"], err, true))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(4, "state", pJson["state"], err, true))
            return false;
    }
    if(pJson.isMember("vote_count"))
    {
        if(!validJsonOfField(5, "vote_count", pJson["vote_count"], err, true))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(6, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(7, "date", pJson["date"], err, true))
            return false;
    }
    return true;
}
bool DishAdd::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DishAdd::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("add_id"))
    {
        if(!validJsonOfField(0, "add_id", pJson["add_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("ai_score"))
    {
        if(!validJsonOfField(3, "ai_score", pJson["ai_score"], err, false))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(4, "state", pJson["state"], err, false))
            return false;
    }
    if(pJson.isMember("vote_count"))
    {
        if(!validJsonOfField(5, "vote_count", pJson["vote_count"], err, false))
            return false;
    }
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(6, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(7, "date", pJson["date"], err, false))
            return false;
    }
    return true;
}
bool DishAdd::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DishAdd::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
