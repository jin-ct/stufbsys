/**
 *
 *  DataStatistics.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "DataStatistics.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string DataStatistics::Cols::_visit = "\"visit\"";
const std::string DataStatistics::Cols::_suggestion_num = "\"suggestion_num\"";
const std::string DataStatistics::Cols::_evaluate_num = "\"evaluate_num\"";
const std::string DataStatistics::Cols::_week = "\"week\"";
const std::string DataStatistics::Cols::_date = "\"date\"";
const std::string DataStatistics::Cols::_data_id = "\"data_id\"";
const std::string DataStatistics::Cols::_dish_add_num = "\"dish_add_num\"";
const std::string DataStatistics::primaryKeyName = "data_id";
const bool DataStatistics::hasPrimaryKey = true;
const std::string DataStatistics::tableName = "\"data_statistics\"";

const std::vector<typename DataStatistics::MetaData> DataStatistics::metaData_={
{"visit","int32_t","integer",4,0,0,0},
{"suggestion_num","int32_t","integer",4,0,0,0},
{"evaluate_num","int32_t","integer",4,0,0,0},
{"week","std::string","character varying",10,0,0,0},
{"date","::trantor::Date","date",0,0,0,1},
{"data_id","short","smallint",2,1,1,1},
{"dish_add_num","int32_t","integer",4,0,0,0}
};
const std::string &DataStatistics::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
DataStatistics::DataStatistics(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["visit"].isNull())
        {
            visit_=std::make_shared<int32_t>(r["visit"].as<int32_t>());
        }
        if(!r["suggestion_num"].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>(r["suggestion_num"].as<int32_t>());
        }
        if(!r["evaluate_num"].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>(r["evaluate_num"].as<int32_t>());
        }
        if(!r["week"].isNull())
        {
            week_=std::make_shared<std::string>(r["week"].as<std::string>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["data_id"].isNull())
        {
            dataId_=std::make_shared<short>(r["data_id"].as<short>());
        }
        if(!r["dish_add_num"].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>(r["dish_add_num"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            visit_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            week_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            dataId_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

DataStatistics::DataStatistics(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            visit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            week_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            dataId_=std::make_shared<short>((short)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

DataStatistics::DataStatistics(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("visit"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["visit"].isNull())
        {
            visit_=std::make_shared<int32_t>((int32_t)pJson["visit"].asInt64());
        }
    }
    if(pJson.isMember("suggestion_num"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["suggestion_num"].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>((int32_t)pJson["suggestion_num"].asInt64());
        }
    }
    if(pJson.isMember("evaluate_num"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["evaluate_num"].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>((int32_t)pJson["evaluate_num"].asInt64());
        }
    }
    if(pJson.isMember("week"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["week"].isNull())
        {
            week_=std::make_shared<std::string>(pJson["week"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("data_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["data_id"].isNull())
        {
            dataId_=std::make_shared<short>((short)pJson["data_id"].asInt64());
        }
    }
    if(pJson.isMember("dish_add_num"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["dish_add_num"].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>((int32_t)pJson["dish_add_num"].asInt64());
        }
    }
}

void DataStatistics::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            visit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            week_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            dataId_=std::make_shared<short>((short)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
}

void DataStatistics::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("visit"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["visit"].isNull())
        {
            visit_=std::make_shared<int32_t>((int32_t)pJson["visit"].asInt64());
        }
    }
    if(pJson.isMember("suggestion_num"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["suggestion_num"].isNull())
        {
            suggestionNum_=std::make_shared<int32_t>((int32_t)pJson["suggestion_num"].asInt64());
        }
    }
    if(pJson.isMember("evaluate_num"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["evaluate_num"].isNull())
        {
            evaluateNum_=std::make_shared<int32_t>((int32_t)pJson["evaluate_num"].asInt64());
        }
    }
    if(pJson.isMember("week"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["week"].isNull())
        {
            week_=std::make_shared<std::string>(pJson["week"].asString());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("data_id"))
    {
        if(!pJson["data_id"].isNull())
        {
            dataId_=std::make_shared<short>((short)pJson["data_id"].asInt64());
        }
    }
    if(pJson.isMember("dish_add_num"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["dish_add_num"].isNull())
        {
            dishAddNum_=std::make_shared<int32_t>((int32_t)pJson["dish_add_num"].asInt64());
        }
    }
}

const int32_t &DataStatistics::getValueOfVisit() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(visit_)
        return *visit_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DataStatistics::getVisit() const noexcept
{
    return visit_;
}
void DataStatistics::setVisit(const int32_t &pVisit) noexcept
{
    visit_ = std::make_shared<int32_t>(pVisit);
    dirtyFlag_[0] = true;
}
void DataStatistics::setVisitToNull() noexcept
{
    visit_.reset();
    dirtyFlag_[0] = true;
}

const int32_t &DataStatistics::getValueOfSuggestionNum() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(suggestionNum_)
        return *suggestionNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DataStatistics::getSuggestionNum() const noexcept
{
    return suggestionNum_;
}
void DataStatistics::setSuggestionNum(const int32_t &pSuggestionNum) noexcept
{
    suggestionNum_ = std::make_shared<int32_t>(pSuggestionNum);
    dirtyFlag_[1] = true;
}
void DataStatistics::setSuggestionNumToNull() noexcept
{
    suggestionNum_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &DataStatistics::getValueOfEvaluateNum() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(evaluateNum_)
        return *evaluateNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DataStatistics::getEvaluateNum() const noexcept
{
    return evaluateNum_;
}
void DataStatistics::setEvaluateNum(const int32_t &pEvaluateNum) noexcept
{
    evaluateNum_ = std::make_shared<int32_t>(pEvaluateNum);
    dirtyFlag_[2] = true;
}
void DataStatistics::setEvaluateNumToNull() noexcept
{
    evaluateNum_.reset();
    dirtyFlag_[2] = true;
}

const std::string &DataStatistics::getValueOfWeek() const noexcept
{
    static const std::string defaultValue = std::string();
    if(week_)
        return *week_;
    return defaultValue;
}
const std::shared_ptr<std::string> &DataStatistics::getWeek() const noexcept
{
    return week_;
}
void DataStatistics::setWeek(const std::string &pWeek) noexcept
{
    week_ = std::make_shared<std::string>(pWeek);
    dirtyFlag_[3] = true;
}
void DataStatistics::setWeek(std::string &&pWeek) noexcept
{
    week_ = std::make_shared<std::string>(std::move(pWeek));
    dirtyFlag_[3] = true;
}
void DataStatistics::setWeekToNull() noexcept
{
    week_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &DataStatistics::getValueOfDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &DataStatistics::getDate() const noexcept
{
    return date_;
}
void DataStatistics::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[4] = true;
}

const short &DataStatistics::getValueOfDataId() const noexcept
{
    static const short defaultValue = short();
    if(dataId_)
        return *dataId_;
    return defaultValue;
}
const std::shared_ptr<short> &DataStatistics::getDataId() const noexcept
{
    return dataId_;
}
void DataStatistics::setDataId(const short &pDataId) noexcept
{
    dataId_ = std::make_shared<short>(pDataId);
    dirtyFlag_[5] = true;
}
const typename DataStatistics::PrimaryKeyType & DataStatistics::getPrimaryKey() const
{
    assert(dataId_);
    return *dataId_;
}

const int32_t &DataStatistics::getValueOfDishAddNum() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(dishAddNum_)
        return *dishAddNum_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &DataStatistics::getDishAddNum() const noexcept
{
    return dishAddNum_;
}
void DataStatistics::setDishAddNum(const int32_t &pDishAddNum) noexcept
{
    dishAddNum_ = std::make_shared<int32_t>(pDishAddNum);
    dirtyFlag_[6] = true;
}
void DataStatistics::setDishAddNumToNull() noexcept
{
    dishAddNum_.reset();
    dirtyFlag_[6] = true;
}

void DataStatistics::updateId(const uint64_t id)
{
}

const std::vector<std::string> &DataStatistics::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "visit",
        "suggestion_num",
        "evaluate_num",
        "week",
        "date",
        "dish_add_num"
    };
    return inCols;
}

void DataStatistics::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getVisit())
        {
            binder << getValueOfVisit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSuggestionNum())
        {
            binder << getValueOfSuggestionNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEvaluateNum())
        {
            binder << getValueOfEvaluateNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWeek())
        {
            binder << getValueOfWeek();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDishAddNum())
        {
            binder << getValueOfDishAddNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> DataStatistics::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void DataStatistics::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getVisit())
        {
            binder << getValueOfVisit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getSuggestionNum())
        {
            binder << getValueOfSuggestionNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEvaluateNum())
        {
            binder << getValueOfEvaluateNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getWeek())
        {
            binder << getValueOfWeek();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDishAddNum())
        {
            binder << getValueOfDishAddNum();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value DataStatistics::toJson() const
{
    Json::Value ret;
    if(getVisit())
    {
        ret["visit"]=getValueOfVisit();
    }
    else
    {
        ret["visit"]=Json::Value();
    }
    if(getSuggestionNum())
    {
        ret["suggestion_num"]=getValueOfSuggestionNum();
    }
    else
    {
        ret["suggestion_num"]=Json::Value();
    }
    if(getEvaluateNum())
    {
        ret["evaluate_num"]=getValueOfEvaluateNum();
    }
    else
    {
        ret["evaluate_num"]=Json::Value();
    }
    if(getWeek())
    {
        ret["week"]=getValueOfWeek();
    }
    else
    {
        ret["week"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getDataId())
    {
        ret["data_id"]=getValueOfDataId();
    }
    else
    {
        ret["data_id"]=Json::Value();
    }
    if(getDishAddNum())
    {
        ret["dish_add_num"]=getValueOfDishAddNum();
    }
    else
    {
        ret["dish_add_num"]=Json::Value();
    }
    return ret;
}

Json::Value DataStatistics::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getVisit())
            {
                ret[pMasqueradingVector[0]]=getValueOfVisit();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSuggestionNum())
            {
                ret[pMasqueradingVector[1]]=getValueOfSuggestionNum();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEvaluateNum())
            {
                ret[pMasqueradingVector[2]]=getValueOfEvaluateNum();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getWeek())
            {
                ret[pMasqueradingVector[3]]=getValueOfWeek();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[4]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDataId())
            {
                ret[pMasqueradingVector[5]]=getValueOfDataId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDishAddNum())
            {
                ret[pMasqueradingVector[6]]=getValueOfDishAddNum();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getVisit())
    {
        ret["visit"]=getValueOfVisit();
    }
    else
    {
        ret["visit"]=Json::Value();
    }
    if(getSuggestionNum())
    {
        ret["suggestion_num"]=getValueOfSuggestionNum();
    }
    else
    {
        ret["suggestion_num"]=Json::Value();
    }
    if(getEvaluateNum())
    {
        ret["evaluate_num"]=getValueOfEvaluateNum();
    }
    else
    {
        ret["evaluate_num"]=Json::Value();
    }
    if(getWeek())
    {
        ret["week"]=getValueOfWeek();
    }
    else
    {
        ret["week"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    if(getDataId())
    {
        ret["data_id"]=getValueOfDataId();
    }
    else
    {
        ret["data_id"]=Json::Value();
    }
    if(getDishAddNum())
    {
        ret["dish_add_num"]=getValueOfDishAddNum();
    }
    else
    {
        ret["dish_add_num"]=Json::Value();
    }
    return ret;
}

bool DataStatistics::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("visit"))
    {
        if(!validJsonOfField(0, "visit", pJson["visit"], err, true))
            return false;
    }
    if(pJson.isMember("suggestion_num"))
    {
        if(!validJsonOfField(1, "suggestion_num", pJson["suggestion_num"], err, true))
            return false;
    }
    if(pJson.isMember("evaluate_num"))
    {
        if(!validJsonOfField(2, "evaluate_num", pJson["evaluate_num"], err, true))
            return false;
    }
    if(pJson.isMember("week"))
    {
        if(!validJsonOfField(3, "week", pJson["week"], err, true))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(4, "date", pJson["date"], err, true))
            return false;
    }
    if(pJson.isMember("data_id"))
    {
        if(!validJsonOfField(5, "data_id", pJson["data_id"], err, true))
            return false;
    }
    if(pJson.isMember("dish_add_num"))
    {
        if(!validJsonOfField(6, "dish_add_num", pJson["dish_add_num"], err, true))
            return false;
    }
    return true;
}
bool DataStatistics::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DataStatistics::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("visit"))
    {
        if(!validJsonOfField(0, "visit", pJson["visit"], err, false))
            return false;
    }
    if(pJson.isMember("suggestion_num"))
    {
        if(!validJsonOfField(1, "suggestion_num", pJson["suggestion_num"], err, false))
            return false;
    }
    if(pJson.isMember("evaluate_num"))
    {
        if(!validJsonOfField(2, "evaluate_num", pJson["evaluate_num"], err, false))
            return false;
    }
    if(pJson.isMember("week"))
    {
        if(!validJsonOfField(3, "week", pJson["week"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(4, "date", pJson["date"], err, false))
            return false;
    }
    if(pJson.isMember("data_id"))
    {
        if(!validJsonOfField(5, "data_id", pJson["data_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("dish_add_num"))
    {
        if(!validJsonOfField(6, "dish_add_num", pJson["dish_add_num"], err, false))
            return false;
    }
    return true;
}
bool DataStatistics::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool DataStatistics::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
