/**
 *
 *  SchoolSuggestionLong.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "SchoolSuggestionLong.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string SchoolSuggestionLong::Cols::_sch_sug_id = "\"sch_sug_id\"";
const std::string SchoolSuggestionLong::Cols::_title = "\"title\"";
const std::string SchoolSuggestionLong::Cols::_content = "\"content\"";
const std::string SchoolSuggestionLong::Cols::_is_public = "\"is_public\"";
const std::string SchoolSuggestionLong::Cols::_is_anonymous = "\"is_anonymous\"";
const std::string SchoolSuggestionLong::Cols::_name = "\"name\"";
const std::string SchoolSuggestionLong::Cols::_class = "\"class\"";
const std::string SchoolSuggestionLong::Cols::_grade = "\"grade\"";
const std::string SchoolSuggestionLong::Cols::_ai_score = "\"ai_score\"";
const std::string SchoolSuggestionLong::Cols::_type = "\"type\"";
const std::string SchoolSuggestionLong::Cols::_vote_count = "\"vote_count\"";
const std::string SchoolSuggestionLong::Cols::_date = "\"date\"";
const std::string SchoolSuggestionLong::primaryKeyName = "sch_sug_id";
const bool SchoolSuggestionLong::hasPrimaryKey = true;
const std::string SchoolSuggestionLong::tableName = "\"school_suggestion_long\"";

const std::vector<typename SchoolSuggestionLong::MetaData> SchoolSuggestionLong::metaData_={
{"sch_sug_id","int64_t","bigint",8,1,1,1},
{"title","std::string","character varying",255,0,0,1},
{"content","std::string","text",0,0,0,1},
{"is_public","bool","boolean",1,0,0,1},
{"is_anonymous","bool","boolean",1,0,0,1},
{"name","std::string","character varying",20,0,0,0},
{"class","std::string","character varying",20,0,0,0},
{"grade","std::string","character varying",20,0,0,0},
{"ai_score","float","real",4,0,0,0},
{"type","short","smallint",2,0,0,1},
{"vote_count","int32_t","integer",4,0,0,0},
{"date","::trantor::Date","date",0,0,0,1}
};
const std::string &SchoolSuggestionLong::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
SchoolSuggestionLong::SchoolSuggestionLong(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["sch_sug_id"].isNull())
        {
            schSugId_=std::make_shared<int64_t>(r["sch_sug_id"].as<int64_t>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["content"].isNull())
        {
            content_=std::make_shared<std::string>(r["content"].as<std::string>());
        }
        if(!r["is_public"].isNull())
        {
            isPublic_=std::make_shared<bool>(r["is_public"].as<bool>());
        }
        if(!r["is_anonymous"].isNull())
        {
            isAnonymous_=std::make_shared<bool>(r["is_anonymous"].as<bool>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["class"].isNull())
        {
            class_=std::make_shared<std::string>(r["class"].as<std::string>());
        }
        if(!r["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(r["grade"].as<std::string>());
        }
        if(!r["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(r["ai_score"].as<float>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<short>(r["type"].as<short>());
        }
        if(!r["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>(r["vote_count"].as<int32_t>());
        }
        if(!r["date"].isNull())
        {
            auto daysStr = r["date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            schSugId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            content_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            isPublic_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            isAnonymous_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            class_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            grade_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            aiScore_=std::make_shared<float>(r[index].as<float>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            type_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            voteCount_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }

}

SchoolSuggestionLong::SchoolSuggestionLong(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            schSugId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            isPublic_=std::make_shared<bool>(pJson[pMasqueradingVector[3]].asBool());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isAnonymous_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            aiScore_=std::make_shared<float>(pJson[pMasqueradingVector[8]].asFloat());
        }
     }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type_=std::make_shared<short>((short)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

SchoolSuggestionLong::SchoolSuggestionLong(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("sch_sug_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["sch_sug_id"].isNull())
        {
            schSugId_=std::make_shared<int64_t>((int64_t)pJson["sch_sug_id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("is_public"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["is_public"].isNull())
        {
            isPublic_=std::make_shared<bool>(pJson["is_public"].asBool());
        }
    }
    if(pJson.isMember("is_anonymous"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["is_anonymous"].isNull())
        {
            isAnonymous_=std::make_shared<bool>(pJson["is_anonymous"].asBool());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("class"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["class"].asString());
        }
    }
    if(pJson.isMember("grade"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["grade"].asString());
        }
    }
    if(pJson.isMember("ai_score"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(pJson["ai_score"].asFloat());
        }
     }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<short>((short)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("vote_count"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson["vote_count"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void SchoolSuggestionLong::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            schSugId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            content_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            isPublic_=std::make_shared<bool>(pJson[pMasqueradingVector[3]].asBool());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            isAnonymous_=std::make_shared<bool>(pJson[pMasqueradingVector[4]].asBool());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            aiScore_=std::make_shared<float>(pJson[pMasqueradingVector[8]].asFloat());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type_=std::make_shared<short>((short)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

void SchoolSuggestionLong::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("sch_sug_id"))
    {
        if(!pJson["sch_sug_id"].isNull())
        {
            schSugId_=std::make_shared<int64_t>((int64_t)pJson["sch_sug_id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["content"].isNull())
        {
            content_=std::make_shared<std::string>(pJson["content"].asString());
        }
    }
    if(pJson.isMember("is_public"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["is_public"].isNull())
        {
            isPublic_=std::make_shared<bool>(pJson["is_public"].asBool());
        }
    }
    if(pJson.isMember("is_anonymous"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["is_anonymous"].isNull())
        {
            isAnonymous_=std::make_shared<bool>(pJson["is_anonymous"].asBool());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("class"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["class"].asString());
        }
    }
    if(pJson.isMember("grade"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["grade"].asString());
        }
    }
    if(pJson.isMember("ai_score"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["ai_score"].isNull())
        {
            aiScore_=std::make_shared<float>(pJson["ai_score"].asFloat());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<short>((short)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("vote_count"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["vote_count"].isNull())
        {
            voteCount_=std::make_shared<int32_t>((int32_t)pJson["vote_count"].asInt64());
        }
    }
    if(pJson.isMember("date"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["date"].isNull())
        {
            auto daysStr = pJson["date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            date_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
}

const int64_t &SchoolSuggestionLong::getValueOfSchSugId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(schSugId_)
        return *schSugId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &SchoolSuggestionLong::getSchSugId() const noexcept
{
    return schSugId_;
}
void SchoolSuggestionLong::setSchSugId(const int64_t &pSchSugId) noexcept
{
    schSugId_ = std::make_shared<int64_t>(pSchSugId);
    dirtyFlag_[0] = true;
}
const typename SchoolSuggestionLong::PrimaryKeyType & SchoolSuggestionLong::getPrimaryKey() const
{
    assert(schSugId_);
    return *schSugId_;
}

const std::string &SchoolSuggestionLong::getValueOfTitle() const noexcept
{
    static const std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchoolSuggestionLong::getTitle() const noexcept
{
    return title_;
}
void SchoolSuggestionLong::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void SchoolSuggestionLong::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}

const std::string &SchoolSuggestionLong::getValueOfContent() const noexcept
{
    static const std::string defaultValue = std::string();
    if(content_)
        return *content_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchoolSuggestionLong::getContent() const noexcept
{
    return content_;
}
void SchoolSuggestionLong::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::string>(pContent);
    dirtyFlag_[2] = true;
}
void SchoolSuggestionLong::setContent(std::string &&pContent) noexcept
{
    content_ = std::make_shared<std::string>(std::move(pContent));
    dirtyFlag_[2] = true;
}

const bool &SchoolSuggestionLong::getValueOfIsPublic() const noexcept
{
    static const bool defaultValue = bool();
    if(isPublic_)
        return *isPublic_;
    return defaultValue;
}
const std::shared_ptr<bool> &SchoolSuggestionLong::getIsPublic() const noexcept
{
    return isPublic_;
}
void SchoolSuggestionLong::setIsPublic(const bool &pIsPublic) noexcept
{
    isPublic_ = std::make_shared<bool>(pIsPublic);
    dirtyFlag_[3] = true;
}

const bool &SchoolSuggestionLong::getValueOfIsAnonymous() const noexcept
{
    static const bool defaultValue = bool();
    if(isAnonymous_)
        return *isAnonymous_;
    return defaultValue;
}
const std::shared_ptr<bool> &SchoolSuggestionLong::getIsAnonymous() const noexcept
{
    return isAnonymous_;
}
void SchoolSuggestionLong::setIsAnonymous(const bool &pIsAnonymous) noexcept
{
    isAnonymous_ = std::make_shared<bool>(pIsAnonymous);
    dirtyFlag_[4] = true;
}

const std::string &SchoolSuggestionLong::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchoolSuggestionLong::getName() const noexcept
{
    return name_;
}
void SchoolSuggestionLong::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[5] = true;
}
void SchoolSuggestionLong::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[5] = true;
}
void SchoolSuggestionLong::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[5] = true;
}

const std::string &SchoolSuggestionLong::getValueOfClass() const noexcept
{
    static const std::string defaultValue = std::string();
    if(class_)
        return *class_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchoolSuggestionLong::getClass() const noexcept
{
    return class_;
}
void SchoolSuggestionLong::setClass(const std::string &pClass) noexcept
{
    class_ = std::make_shared<std::string>(pClass);
    dirtyFlag_[6] = true;
}
void SchoolSuggestionLong::setClass(std::string &&pClass) noexcept
{
    class_ = std::make_shared<std::string>(std::move(pClass));
    dirtyFlag_[6] = true;
}
void SchoolSuggestionLong::setClassToNull() noexcept
{
    class_.reset();
    dirtyFlag_[6] = true;
}

const std::string &SchoolSuggestionLong::getValueOfGrade() const noexcept
{
    static const std::string defaultValue = std::string();
    if(grade_)
        return *grade_;
    return defaultValue;
}
const std::shared_ptr<std::string> &SchoolSuggestionLong::getGrade() const noexcept
{
    return grade_;
}
void SchoolSuggestionLong::setGrade(const std::string &pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(pGrade);
    dirtyFlag_[7] = true;
}
void SchoolSuggestionLong::setGrade(std::string &&pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(std::move(pGrade));
    dirtyFlag_[7] = true;
}
void SchoolSuggestionLong::setGradeToNull() noexcept
{
    grade_.reset();
    dirtyFlag_[7] = true;
}

const float &SchoolSuggestionLong::getValueOfAiScore() const noexcept
{
    static const float defaultValue = float();
    if(aiScore_)
        return *aiScore_;
    return defaultValue;
}
const std::shared_ptr<float> &SchoolSuggestionLong::getAiScore() const noexcept
{
    return aiScore_;
}
void SchoolSuggestionLong::setAiScore(const float &pAiScore) noexcept
{
    aiScore_ = std::make_shared<float>(pAiScore);
    dirtyFlag_[8] = true;
}
void SchoolSuggestionLong::setAiScoreToNull() noexcept
{
    aiScore_.reset();
    dirtyFlag_[8] = true;
}

const short &SchoolSuggestionLong::getValueOfType() const noexcept
{
    static const short defaultValue = short();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<short> &SchoolSuggestionLong::getType() const noexcept
{
    return type_;
}
void SchoolSuggestionLong::setType(const short &pType) noexcept
{
    type_ = std::make_shared<short>(pType);
    dirtyFlag_[9] = true;
}

const int32_t &SchoolSuggestionLong::getValueOfVoteCount() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(voteCount_)
        return *voteCount_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &SchoolSuggestionLong::getVoteCount() const noexcept
{
    return voteCount_;
}
void SchoolSuggestionLong::setVoteCount(const int32_t &pVoteCount) noexcept
{
    voteCount_ = std::make_shared<int32_t>(pVoteCount);
    dirtyFlag_[10] = true;
}
void SchoolSuggestionLong::setVoteCountToNull() noexcept
{
    voteCount_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &SchoolSuggestionLong::getValueOfDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(date_)
        return *date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &SchoolSuggestionLong::getDate() const noexcept
{
    return date_;
}
void SchoolSuggestionLong::setDate(const ::trantor::Date &pDate) noexcept
{
    date_ = std::make_shared<::trantor::Date>(pDate.roundDay());
    dirtyFlag_[11] = true;
}

void SchoolSuggestionLong::updateId(const uint64_t id)
{
}

const std::vector<std::string> &SchoolSuggestionLong::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "title",
        "content",
        "is_public",
        "is_anonymous",
        "name",
        "class",
        "grade",
        "ai_score",
        "type",
        "vote_count",
        "date"
    };
    return inCols;
}

void SchoolSuggestionLong::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIsPublic())
        {
            binder << getValueOfIsPublic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsAnonymous())
        {
            binder << getValueOfIsAnonymous();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAiScore())
        {
            binder << getValueOfAiScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getVoteCount())
        {
            binder << getValueOfVoteCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> SchoolSuggestionLong::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void SchoolSuggestionLong::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIsPublic())
        {
            binder << getValueOfIsPublic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIsAnonymous())
        {
            binder << getValueOfIsAnonymous();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAiScore())
        {
            binder << getValueOfAiScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getVoteCount())
        {
            binder << getValueOfVoteCount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getDate())
        {
            binder << getValueOfDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value SchoolSuggestionLong::toJson() const
{
    Json::Value ret;
    if(getSchSugId())
    {
        ret["sch_sug_id"]=(Json::Int64)getValueOfSchSugId();
    }
    else
    {
        ret["sch_sug_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getIsPublic())
    {
        ret["is_public"]=getValueOfIsPublic();
    }
    else
    {
        ret["is_public"]=Json::Value();
    }
    if(getIsAnonymous())
    {
        ret["is_anonymous"]=getValueOfIsAnonymous();
    }
    else
    {
        ret["is_anonymous"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getClass())
    {
        ret["class"]=getValueOfClass();
    }
    else
    {
        ret["class"]=Json::Value();
    }
    if(getGrade())
    {
        ret["grade"]=getValueOfGrade();
    }
    else
    {
        ret["grade"]=Json::Value();
    }
    if(getAiScore())
    {
        ret["ai_score"]=getValueOfAiScore();
    }
    else
    {
        ret["ai_score"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getVoteCount())
    {
        ret["vote_count"]=getValueOfVoteCount();
    }
    else
    {
        ret["vote_count"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

Json::Value SchoolSuggestionLong::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getSchSugId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfSchSugId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[2]]=getValueOfContent();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getIsPublic())
            {
                ret[pMasqueradingVector[3]]=getValueOfIsPublic();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIsAnonymous())
            {
                ret[pMasqueradingVector[4]]=getValueOfIsAnonymous();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[5]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getClass())
            {
                ret[pMasqueradingVector[6]]=getValueOfClass();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getGrade())
            {
                ret[pMasqueradingVector[7]]=getValueOfGrade();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getAiScore())
            {
                ret[pMasqueradingVector[8]]=getValueOfAiScore();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[9]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getVoteCount())
            {
                ret[pMasqueradingVector[10]]=getValueOfVoteCount();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getDate())
            {
                ret[pMasqueradingVector[11]]=getDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getSchSugId())
    {
        ret["sch_sug_id"]=(Json::Int64)getValueOfSchSugId();
    }
    else
    {
        ret["sch_sug_id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=getValueOfContent();
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getIsPublic())
    {
        ret["is_public"]=getValueOfIsPublic();
    }
    else
    {
        ret["is_public"]=Json::Value();
    }
    if(getIsAnonymous())
    {
        ret["is_anonymous"]=getValueOfIsAnonymous();
    }
    else
    {
        ret["is_anonymous"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getClass())
    {
        ret["class"]=getValueOfClass();
    }
    else
    {
        ret["class"]=Json::Value();
    }
    if(getGrade())
    {
        ret["grade"]=getValueOfGrade();
    }
    else
    {
        ret["grade"]=Json::Value();
    }
    if(getAiScore())
    {
        ret["ai_score"]=getValueOfAiScore();
    }
    else
    {
        ret["ai_score"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getVoteCount())
    {
        ret["vote_count"]=getValueOfVoteCount();
    }
    else
    {
        ret["vote_count"]=Json::Value();
    }
    if(getDate())
    {
        ret["date"]=getDate()->toDbStringLocal();
    }
    else
    {
        ret["date"]=Json::Value();
    }
    return ret;
}

bool SchoolSuggestionLong::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("sch_sug_id"))
    {
        if(!validJsonOfField(0, "sch_sug_id", pJson["sch_sug_id"], err, true))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(2, "content", pJson["content"], err, true))
            return false;
    }
    else
    {
        err="The content column cannot be null";
        return false;
    }
    if(pJson.isMember("is_public"))
    {
        if(!validJsonOfField(3, "is_public", pJson["is_public"], err, true))
            return false;
    }
    else
    {
        err="The is_public column cannot be null";
        return false;
    }
    if(pJson.isMember("is_anonymous"))
    {
        if(!validJsonOfField(4, "is_anonymous", pJson["is_anonymous"], err, true))
            return false;
    }
    else
    {
        err="The is_anonymous column cannot be null";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(5, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("class"))
    {
        if(!validJsonOfField(6, "class", pJson["class"], err, true))
            return false;
    }
    if(pJson.isMember("grade"))
    {
        if(!validJsonOfField(7, "grade", pJson["grade"], err, true))
            return false;
    }
    if(pJson.isMember("ai_score"))
    {
        if(!validJsonOfField(8, "ai_score", pJson["ai_score"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(9, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("vote_count"))
    {
        if(!validJsonOfField(10, "vote_count", pJson["vote_count"], err, true))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(11, "date", pJson["date"], err, true))
            return false;
    }
    return true;
}
bool SchoolSuggestionLong::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                              const std::vector<std::string> &pMasqueradingVector,
                                                              std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool SchoolSuggestionLong::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("sch_sug_id"))
    {
        if(!validJsonOfField(0, "sch_sug_id", pJson["sch_sug_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(2, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("is_public"))
    {
        if(!validJsonOfField(3, "is_public", pJson["is_public"], err, false))
            return false;
    }
    if(pJson.isMember("is_anonymous"))
    {
        if(!validJsonOfField(4, "is_anonymous", pJson["is_anonymous"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(5, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("class"))
    {
        if(!validJsonOfField(6, "class", pJson["class"], err, false))
            return false;
    }
    if(pJson.isMember("grade"))
    {
        if(!validJsonOfField(7, "grade", pJson["grade"], err, false))
            return false;
    }
    if(pJson.isMember("ai_score"))
    {
        if(!validJsonOfField(8, "ai_score", pJson["ai_score"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(9, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("vote_count"))
    {
        if(!validJsonOfField(10, "vote_count", pJson["vote_count"], err, false))
            return false;
    }
    if(pJson.isMember("date"))
    {
        if(!validJsonOfField(11, "date", pJson["date"], err, false))
            return false;
    }
    return true;
}
bool SchoolSuggestionLong::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                            const std::vector<std::string> &pMasqueradingVector,
                                                            std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool SchoolSuggestionLong::validJsonOfField(size_t index,
                                            const std::string &fieldName,
                                            const Json::Value &pJson,
                                            std::string &err,
                                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
