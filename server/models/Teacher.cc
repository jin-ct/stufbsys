/**
 *
 *  Teacher.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Teacher.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::stufbsys;

const std::string Teacher::Cols::_teacher_id = "\"teacher_id\"";
const std::string Teacher::Cols::_name = "\"name\"";
const std::string Teacher::Cols::_subject = "\"subject\"";
const std::string Teacher::Cols::_grade = "\"grade\"";
const std::string Teacher::Cols::_class = "\"class\"";
const std::string Teacher::Cols::_email = "\"email\"";
const std::string Teacher::Cols::_password = "\"password\"";
const std::string Teacher::primaryKeyName = "teacher_id";
const bool Teacher::hasPrimaryKey = true;
const std::string Teacher::tableName = "\"teacher\"";

const std::vector<typename Teacher::MetaData> Teacher::metaData_={
{"teacher_id","int64_t","bigint",8,1,1,1},
{"name","std::string","character varying",20,0,0,1},
{"subject","std::string","character varying",20,0,0,1},
{"grade","std::string","character varying",20,0,0,1},
{"class","std::string","character varying",40,0,0,1},
{"email","std::string","character varying",80,0,0,0},
{"password","std::string","character varying",255,0,0,1}
};
const std::string &Teacher::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Teacher::Teacher(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["teacher_id"].isNull())
        {
            teacherId_=std::make_shared<int64_t>(r["teacher_id"].as<int64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["subject"].isNull())
        {
            subject_=std::make_shared<std::string>(r["subject"].as<std::string>());
        }
        if(!r["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(r["grade"].as<std::string>());
        }
        if(!r["class"].isNull())
        {
            class_=std::make_shared<std::string>(r["class"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            teacherId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            subject_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            grade_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            class_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Teacher::Teacher(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            teacherId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            subject_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

Teacher::Teacher(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("teacher_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["teacher_id"].isNull())
        {
            teacherId_=std::make_shared<int64_t>((int64_t)pJson["teacher_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("subject"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["subject"].isNull())
        {
            subject_=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("grade"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["grade"].asString());
        }
    }
    if(pJson.isMember("class"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["class"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
}

void Teacher::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            teacherId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            subject_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            grade_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            class_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
}

void Teacher::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("teacher_id"))
    {
        if(!pJson["teacher_id"].isNull())
        {
            teacherId_=std::make_shared<int64_t>((int64_t)pJson["teacher_id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("subject"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["subject"].isNull())
        {
            subject_=std::make_shared<std::string>(pJson["subject"].asString());
        }
    }
    if(pJson.isMember("grade"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["grade"].isNull())
        {
            grade_=std::make_shared<std::string>(pJson["grade"].asString());
        }
    }
    if(pJson.isMember("class"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["class"].isNull())
        {
            class_=std::make_shared<std::string>(pJson["class"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
}

const int64_t &Teacher::getValueOfTeacherId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(teacherId_)
        return *teacherId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Teacher::getTeacherId() const noexcept
{
    return teacherId_;
}
void Teacher::setTeacherId(const int64_t &pTeacherId) noexcept
{
    teacherId_ = std::make_shared<int64_t>(pTeacherId);
    dirtyFlag_[0] = true;
}
const typename Teacher::PrimaryKeyType & Teacher::getPrimaryKey() const
{
    assert(teacherId_);
    return *teacherId_;
}

const std::string &Teacher::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getName() const noexcept
{
    return name_;
}
void Teacher::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Teacher::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Teacher::getValueOfSubject() const noexcept
{
    static const std::string defaultValue = std::string();
    if(subject_)
        return *subject_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getSubject() const noexcept
{
    return subject_;
}
void Teacher::setSubject(const std::string &pSubject) noexcept
{
    subject_ = std::make_shared<std::string>(pSubject);
    dirtyFlag_[2] = true;
}
void Teacher::setSubject(std::string &&pSubject) noexcept
{
    subject_ = std::make_shared<std::string>(std::move(pSubject));
    dirtyFlag_[2] = true;
}

const std::string &Teacher::getValueOfGrade() const noexcept
{
    static const std::string defaultValue = std::string();
    if(grade_)
        return *grade_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getGrade() const noexcept
{
    return grade_;
}
void Teacher::setGrade(const std::string &pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(pGrade);
    dirtyFlag_[3] = true;
}
void Teacher::setGrade(std::string &&pGrade) noexcept
{
    grade_ = std::make_shared<std::string>(std::move(pGrade));
    dirtyFlag_[3] = true;
}

const std::string &Teacher::getValueOfClass() const noexcept
{
    static const std::string defaultValue = std::string();
    if(class_)
        return *class_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getClass() const noexcept
{
    return class_;
}
void Teacher::setClass(const std::string &pClass) noexcept
{
    class_ = std::make_shared<std::string>(pClass);
    dirtyFlag_[4] = true;
}
void Teacher::setClass(std::string &&pClass) noexcept
{
    class_ = std::make_shared<std::string>(std::move(pClass));
    dirtyFlag_[4] = true;
}

const std::string &Teacher::getValueOfEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getEmail() const noexcept
{
    return email_;
}
void Teacher::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[5] = true;
}
void Teacher::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[5] = true;
}
void Teacher::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Teacher::getValueOfPassword() const noexcept
{
    static const std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Teacher::getPassword() const noexcept
{
    return password_;
}
void Teacher::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[6] = true;
}
void Teacher::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[6] = true;
}

void Teacher::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Teacher::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "subject",
        "grade",
        "class",
        "email",
        "password"
    };
    return inCols;
}

void Teacher::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Teacher::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void Teacher::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSubject())
        {
            binder << getValueOfSubject();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getGrade())
        {
            binder << getValueOfGrade();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClass())
        {
            binder << getValueOfClass();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Teacher::toJson() const
{
    Json::Value ret;
    if(getTeacherId())
    {
        ret["teacher_id"]=(Json::Int64)getValueOfTeacherId();
    }
    else
    {
        ret["teacher_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getGrade())
    {
        ret["grade"]=getValueOfGrade();
    }
    else
    {
        ret["grade"]=Json::Value();
    }
    if(getClass())
    {
        ret["class"]=getValueOfClass();
    }
    else
    {
        ret["class"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    return ret;
}

Json::Value Teacher::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getTeacherId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfTeacherId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSubject())
            {
                ret[pMasqueradingVector[2]]=getValueOfSubject();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getGrade())
            {
                ret[pMasqueradingVector[3]]=getValueOfGrade();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getClass())
            {
                ret[pMasqueradingVector[4]]=getValueOfClass();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[5]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[6]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getTeacherId())
    {
        ret["teacher_id"]=(Json::Int64)getValueOfTeacherId();
    }
    else
    {
        ret["teacher_id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSubject())
    {
        ret["subject"]=getValueOfSubject();
    }
    else
    {
        ret["subject"]=Json::Value();
    }
    if(getGrade())
    {
        ret["grade"]=getValueOfGrade();
    }
    else
    {
        ret["grade"]=Json::Value();
    }
    if(getClass())
    {
        ret["class"]=getValueOfClass();
    }
    else
    {
        ret["class"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    return ret;
}

bool Teacher::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("teacher_id"))
    {
        if(!validJsonOfField(0, "teacher_id", pJson["teacher_id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(2, "subject", pJson["subject"], err, true))
            return false;
    }
    else
    {
        err="The subject column cannot be null";
        return false;
    }
    if(pJson.isMember("grade"))
    {
        if(!validJsonOfField(3, "grade", pJson["grade"], err, true))
            return false;
    }
    else
    {
        err="The grade column cannot be null";
        return false;
    }
    if(pJson.isMember("class"))
    {
        if(!validJsonOfField(4, "class", pJson["class"], err, true))
            return false;
    }
    else
    {
        err="The class column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(5, "email", pJson["email"], err, true))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(6, "password", pJson["password"], err, true))
            return false;
    }
    else
    {
        err="The password column cannot be null";
        return false;
    }
    return true;
}
bool Teacher::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teacher::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("teacher_id"))
    {
        if(!validJsonOfField(0, "teacher_id", pJson["teacher_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("subject"))
    {
        if(!validJsonOfField(2, "subject", pJson["subject"], err, false))
            return false;
    }
    if(pJson.isMember("grade"))
    {
        if(!validJsonOfField(3, "grade", pJson["grade"], err, false))
            return false;
    }
    if(pJson.isMember("class"))
    {
        if(!validJsonOfField(4, "class", pJson["class"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(5, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(6, "password", pJson["password"], err, false))
            return false;
    }
    return true;
}
bool Teacher::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Teacher::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 40)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 40)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 80)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 80)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
